buildscript {
    ext.kotlin_version = '1.7.10'
    ext.dokka_version = '1.7.10'
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'

        classpath 'com.google.gms:google-services:4.3.15'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.vanniktech:gradle-android-junit-jacoco-plugin:0.16.0"

        classpath 'com.github.kezong:fat-aar:1.3.6'
    }
}
plugins {
    id("org.jetbrains.dokka") version "${dokka_version}"
}
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'
apply plugin: 'com.vanniktech.android.junit.jacoco'
apply plugin: 'com.kezong.fat-aar'

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }

        maven {
            url "./om_sdk_repo"
        }
    }
}

//tasks.withType(Test) {
//    /**
//     * fix for retrofit https://github.com/square/retrofit/issues/3341
//     */
//    jvmArgs = ["--add-opens", "java.base/java.lang.invoke=ALL-UNNAMED"]
//}

junitJacoco {
    jacocoVersion = '0.8.7'
    excludes = ['**/*Resizer**', '**/*models**',
                '**/*retrofit**', '**/*BuildVersion**',
                '**/db/Database*', '**/db/BaseItem*',
                '**/db/DateConverter*', '**/db/ContentSDKDao*',
                '**/*util**', '**/*ArcxpCallback**',
                '**/*BuildConfig**', '**/*ArcxpContentManager.getSectionsList.new**',
                '**/*YouTube*.*', '**/*legacy**',
                '**/*pal**', '**/*iab**', '**/*callbacks*',
                '**/*DependencyProvider**', '**/*Utils*',
                '**/*VideoVO*', '**/*RetrofitController*'
    ]
    includeNoLocationClasses = false
    includeInstrumentationCoverageInMergedReport = false
}

android {
    compileSdk 33

    defaultConfig {
        minSdk 22
        targetSdk 33
        versionName sdk_version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    sourceSets {
        main.java.srcDirs += 'src/main/java'
    }

    buildTypes {
        debug {
            versionNameSuffix ".debug"
            resValue "string", "sdk_version",
                    "${defaultConfig.versionName}${versionNameSuffix}"
            resValue "string", "resizer_key", localProperties['resizer_key'] ?: ""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "sdk_version",
                    "${defaultConfig.versionName}"
            resValue "string", "resizer_key", localProperties['resizer_key'] ?: ""
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFile != null && outputFileName.endsWith('.aar')) {
                outputFileName = "arcxp-mobile-sdk-android-${sdk_version}.aar"
            }
        }
    }
}

tasks.dokkaGfm.configure {

    outputDirectory.set(new File("$buildDir/gfm"))

    dokkaSourceSets {
        configureEach {
            skipDeprecated.set(true)

            displayName.set("ArcXP SDK")

            includes.from("AndroidSDKDoc.md")
            skipEmptyPackages.set(false)
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    api "com.squareup.retrofit2:retrofit:2.9.0"
    api "com.squareup.retrofit2:converter-gson:2.9.0"
    api "com.squareup.retrofit2:adapter-rxjava:2.9.0"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"

    implementation 'io.insert-koin:koin-core:3.1.5'
    implementation 'androidx.test:core-ktx:1.5.0'

    dokkaHtmlPlugin("org.jetbrains.dokka:android-documentation-plugin:$dokka_version")

    implementation 'com.google.android.gms:play-services-safetynet:18.0.1'
    implementation 'com.google.android.gms:play-services-auth:20.4.1'
    implementation 'com.facebook.android:facebook-login:12.3.0'
    implementation 'androidx.security:security-crypto:1.1.0-alpha04'

    api "com.squareup.okhttp3:logging-interceptor:4.10.0"
    implementation "io.reactivex:rxjava:1.3.8"
    implementation "io.reactivex:rxandroid:1.2.1"

    implementation "androidx.annotation:annotation:1.5.0"
    api("io.grpc:grpc-kotlin-stub:1.0.0")

    def moshiVersion = "1.13.0"
    implementation("com.squareup.moshi:moshi:$moshiVersion")
    implementation("com.squareup.moshi:moshi-adapters:$moshiVersion")
    kapt("com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion")

    implementation("com.squareup.retrofit2:converter-moshi:2.9.0")

    implementation "com.google.code.gson:gson:2.9.0"

    def room_version = "2.5.1"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation 'com.squareup:pollexor:3.0.0'

    def currentExoplayerVersion = '2.18.5'
    implementation "com.google.android.exoplayer:exoplayer-core:$currentExoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-ui:$currentExoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-hls:$currentExoplayerVersion"
    implementation "com.google.android.exoplayer:extension-ima:$currentExoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-smoothstreaming:$currentExoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-dash:$currentExoplayerVersion"
    implementation "com.google.android.exoplayer:extension-cast:$currentExoplayerVersion"

    implementation 'androidx.mediarouter:mediarouter:1.3.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'com.google.android.gms:play-services-pal:20.0.1'
    embed 'com.iab.omid.library.washpost:omsdk-android:1.3.22@aar'

    implementation 'com.github.bumptech.glide:glide:4.12.0'


    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    api "com.squareup.retrofit2:retrofit-mock:2.9.0"
    testImplementation "io.mockk:mockk:1.13.4"
    testImplementation 'org.mockito:mockito-core:5.1.1'
    testImplementation 'org.json:json:20210307'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'
    testImplementation 'io.insert-koin:koin-test:3.1.5'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'io.mockk:mockk-agent-jvm:1.13.4'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
    testImplementation 'com.iab.omid.library.washpost:omsdk-android:1.3.22@aar'
    testImplementation "org.robolectric:robolectric:4.8.1"
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
    androidTestImplementation "androidx.test.ext:junit-ktx:1.1.5"

}

dokkaHtml {
    moduleName.set("ArcXP-Mobile-SDK-Android")
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId 'arcxp-sdk-android'
            artifactId 'arcxp-mobile-sdk-android'
            version sdk_version
            artifact "$buildDir/outputs/aar/arcxp-mobile-sdk-android-${sdk_version}.aar"

            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
    }

    //publish to filesystem repo
    repositories {
        maven {
            url "$buildDir/repo"
        }
    }
}

dokkaHtml {
    moduleName.set("ArcXP-Mobile-SDK-Android")
}

def getLocalProperties() {
    def localProperties = new Properties()
    if (file("local.properties").exists()) {
        localProperties.load(new FileInputStream(file("local.properties")))
    }
    return localProperties
}