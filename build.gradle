buildscript {
    ext.kotlin_version = '1.8.21'
    ext.dokka_version = '1.7.10'
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.2.2'

        classpath 'com.google.gms:google-services:4.4.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
    id("org.jetbrains.dokka") version "${dokka_version}"
}
apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
jacoco {
    toolVersion = '0.8.7'
}

def localProperties = new Properties()
if (file("local.properties").exists()) {
    file("local.properties").withInputStream {
        localProperties.load(it)
    }
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn['testDebugUnitTest']
    reports {
        xml.required = true
        html.required = true
    }

    def excludesList = ['**/*ResizerV1**', '**/models**', '**/video/views**',
                        '**/*retrofit**', '**/*BuildVersion**', '**/video/model**',
                        '**/db/Database*', '**/db/BaseItem*', '**/commerce/ui**',
                        '**/db/DateConverter*', '**/content/extendedModels/*JsonAdapter**',
                        '**/commerce/util**', '**/content/util**', '**/video/util/Utils**', '**/commons/util**', '**/*ArcxpCallback**',
                        '**/*BuildConfig**', '**/*ArcxpContentManager.getSectionsList.new**',
                        '**/*YouTube*.*', '**/*legacy**',
                        '**/*pal**', '**/*iab**', '**/*callbacks*',
                        '**/*DependencyProvider**',
                        '**/*VideoVO*', '**/*RetrofitController*']

    def javaClasses = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: excludesList)
    def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: excludesList)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    // Include both Java and Kotlin class files
    classDirectories.setFrom(files([javaClasses, kotlinClasses]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec", "outputs/code-coverage/connected/*coverage.ec"
    ]))
}

tasks.withType(Test).configureEach {
    jvmArgs = ["--add-opens", "java.base/java.net=ALL-UNNAMED",
               "--add-opens", "java.base/java.lang.invoke=ALL-UNNAMED",
               '--add-opens', 'java.base/java.util=ALL-UNNAMED']
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*']
    }
    finalizedBy jacocoTestReport
}

android {
    namespace "com.arcxp.sdk"
    compileSdk 34

    defaultConfig {
        minSdk 22
        targetSdk 34
        versionName sdk_version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    sourceSets {
        main.java.srcDirs += 'src/main/java'
    }

    buildTypes {
        debug {
            versionNameSuffix ".debug"
            resValue "string", "sdk_version",
                    "${defaultConfig.versionName}${versionNameSuffix}"
            resValue "string", "resizer_key", localProperties['resizer_key'] ?: ""
            resValue "string", "clear_text_config", "true"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "sdk_version",
                    "${defaultConfig.versionName}"
            resValue "string", "resizer_key", localProperties['resizer_key'] ?: ""
            resValue "string", "clear_text_config", "false"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

    libraryVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            if (outputFile != null && outputFileName.endsWith('.aar')) {
                outputFileName = "arcxp-mobile-sdk-android-release.aar"
            }
        }
    }

    buildFeatures {
        buildConfig true
    }

    packagingOptions {
        resources.merges += ['META-INF/LICENSE.md']
    }
}

tasks.dokkaGfm.configure {

    outputDirectory.set(new File("$buildDir/gfm"))

    dokkaSourceSets {
        configureEach {
            skipDeprecated.set(true)

            displayName.set("ArcXP SDK")

            includes.from("AndroidSDKDoc.md")
            skipEmptyPackages.set(false)
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    api "com.squareup.retrofit2:retrofit:2.9.0"
    api "com.squareup.retrofit2:converter-gson:2.9.0"
    api "com.squareup.retrofit2:adapter-rxjava:2.9.0"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"

    implementation 'io.insert-koin:koin-core:3.1.5'
    implementation 'androidx.test:core-ktx:1.5.0'

    dokkaHtmlPlugin("org.jetbrains.dokka:android-documentation-plugin:$dokka_version")

    implementation 'com.google.android.gms:play-services-safetynet:18.0.1'
    implementation 'com.google.android.gms:play-services-auth:20.7.0'
    implementation 'com.facebook.android:facebook-login:12.3.0'
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'


    api "com.squareup.okhttp3:logging-interceptor:4.10.0"
    implementation "io.reactivex:rxjava:1.3.8"
    implementation "io.reactivex:rxandroid:1.2.1"

    implementation "androidx.annotation:annotation:1.7.1"
    api("io.grpc:grpc-kotlin-stub:1.0.0")

    def moshiVersion = "1.15.0"
    implementation("com.squareup.moshi:moshi:$moshiVersion")
    implementation("com.squareup.moshi:moshi-adapters:$moshiVersion")
    kapt("com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion")

    implementation("com.squareup.retrofit2:converter-moshi:2.9.0")

    implementation "com.google.code.gson:gson:2.9.0"

    def room_version = "2.6.1"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation 'com.squareup:pollexor:3.0.0'

    def currentMedia3Version = '1.3.0'
    implementation "androidx.media3:media3-exoplayer:$currentMedia3Version"
    implementation "androidx.media3:media3-ui:$currentMedia3Version"
    implementation "androidx.media3:media3-exoplayer-hls:$currentMedia3Version"
    implementation "androidx.media3:media3-exoplayer-ima:$currentMedia3Version"
    implementation "androidx.media3:media3-exoplayer-smoothstreaming:$currentMedia3Version"
    implementation "androidx.media3:media3-exoplayer-dash:$currentMedia3Version"
    implementation "androidx.media3:media3-cast:$currentMedia3Version"
    implementation "androidx.media3:media3-session:$currentMedia3Version"

    implementation 'androidx.mediarouter:mediarouter:1.6.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'com.google.android.gms:play-services-pal:20.2.0'
    implementation 'arcxp-sdk-android-omid:omsdk-android:1.4.9@aar'

    implementation 'com.github.bumptech.glide:glide:4.15.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'junit:junit:4.13.2'
    api "com.squareup.retrofit2:retrofit-mock:2.9.0"
    testImplementation 'org.json:json:20210307'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'
    testImplementation 'io.insert-koin:koin-test:3.1.5'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation "io.mockk:mockk-android:1.13.8"
    testImplementation 'io.mockk:mockk-agent:1.13.8'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    testImplementation 'arcxp-sdk-android-omid:omsdk-android:1.4.9@aar'
    testImplementation "org.robolectric:robolectric:4.10.3"

    androidTestImplementation "androidx.test.ext:junit-ktx:1.1.5"
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
}

publishing {
    repositories {
        repositories {
            maven {
                name = "Repo"
                url "$buildDir/repo"
            }
            maven {
                name = "GithubPackages"
                url = uri("https://maven.pkg.github.com/arcxp/arcxp-sdk-android")
                credentials {
                    username = System.getenv('GITHUB_USER') ?: project.properties['GITHUB_USER']
                    password = System.getenv('GITHUB_PERSONAL_ACCESS_TOKEN') ?: project.properties['GITHUB_PERSONAL_ACCESS_TOKEN']
                }
            }
        }
    }
    publications {
        aar(MavenPublication) {
            groupId 'arcxp-sdk-android'
            artifactId 'arcxp-mobile-sdk-android'
            version sdk_version
            artifact "$buildDir/outputs/aar/arcxp-mobile-sdk-android-release.aar"

            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
    }
}

dokkaHtml {
    moduleName.set("ArcXP-Mobile-SDK-Android")
}
